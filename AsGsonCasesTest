package junit.src.outils.gson;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;

import outils.base.OutilsBase;
import outils.gson.AsOutilsGson;
import outils.gson.OutilsGson;

/**
 * Cas de tests supp√©mentaires pour obtenir 100% de couverture
 */
@DisplayName("outils.gson.AsOutilsGson")
public class AsOutilsGsonCasesTest {

	@Test
	@DisplayName("junit.src.outils.gson.testAsOutilsGsonCasesTest()")
	final void testAsOutilsGsonCasesTest(TestInfo testInfo) throws Exception {
		String[] header = new String[] { "A", "B", "C" };

		List<String[]> rows = new ArrayList<>();
		rows.add(new String[] { "1", "2", "3" });
		rows.add(new String[] { "4", "5", "6" });

		CSVFileData csvFileData = new CSVFileData(header, rows);

		TestsData<CSVFileData> csvFileTestsData = new TestsData<CSVFileData>(csvFileData);

		ListesParseJSON.asCSVFileData("");
		ListesParseJSON.asCSVFileData(csvFileTestsData.asJSON());

		for (int i = -1; i <= 2; i++) {
			ListesParseJSON.asCSVFileDataList(csvFileTestsData.asJSONList(i));
			ListesParseJSON.asCSVFileDataMap(csvFileTestsData.asJSONMap(i));
			ListesParseJSON.asCSVFileDataArray(csvFileTestsData.asJSONArray(i));
			ListesParseJSON.asCSVFileDataArray(csvFileTestsData.getJsonArray(i));
			ListesParseJSON.asCSVFileDataArrayList(csvFileTestsData.asJSONArrayList(i));
			ListesParseJSON.asCSVFileDataArrayMap(csvFileTestsData.asJSONArrayMap(i));
			ListesParseJSON.asCSVFileDataListMap(csvFileTestsData.asJSONListMap(i));
		}

		TestsData<IdValue> idValueTestsData = new TestsData<IdValue>(new IdValue(1L, "Value"));

		ListesParseJSON.asIdValue("");
		ListesParseJSON.asIdValue(idValueTestsData.asJSON());

		for (int i = -1; i <= 2; i++) {
			ListesParseJSON.asIdValueList(idValueTestsData.asJSONList(i));
			ListesParseJSON.asIdValueMap(idValueTestsData.asJSONMap(i));
			ListesParseJSON.asIdValueArray(idValueTestsData.asJSONArray(i));
			ListesParseJSON.asIdValueArray(idValueTestsData.getJsonArray(i));
			ListesParseJSON.asIdValueArrayList(idValueTestsData.asJSONArrayList(i));
			ListesParseJSON.asIdValueArrayMap(idValueTestsData.asJSONArrayMap(i));
			ListesParseJSON.asIdValueListMap(idValueTestsData.asJSONListMap(i));
		}

		TestsData<NameValue> nameValueTestsData = new TestsData<NameValue>(new NameValue("Name", "Value"));

		ListesParseJSON.asNameValue("");
		ListesParseJSON.asNameValue(nameValueTestsData.asJSON());

		for (int i = -1; i <= 2; i++) {
			ListesParseJSON.asNameValueList(nameValueTestsData.asJSONList(i));
			ListesParseJSON.asNameValueMap(nameValueTestsData.asJSONMap(i));
			ListesParseJSON.asNameValueArray(nameValueTestsData.asJSONArray(i));
			ListesParseJSON.asNameValueArray(nameValueTestsData.getJsonArray(i));
			ListesParseJSON.asNameValueArrayList(nameValueTestsData.asJSONArrayList(i));
			ListesParseJSON.asNameValueArrayMap(nameValueTestsData.asJSONArrayMap(i));
			ListesParseJSON.asNameValueListMap(nameValueTestsData.asJSONListMap(i));
		}

		TestsData<StringData> stringDataTestsData = new TestsData<StringData>(new StringData("Name", new Integer(1)));

		ListesParseJSON.asStringData("");
		ListesParseJSON.asStringData(stringDataTestsData.asJSON());

		for (int i = -1; i <= 2; i++) {
			ListesParseJSON.asStringDataList(stringDataTestsData.asJSONList(i));
			ListesParseJSON.asStringDataMap(stringDataTestsData.asJSONMap(i));
			ListesParseJSON.asStringDataArray(stringDataTestsData.asJSONArray(i));
			ListesParseJSON.asStringDataArray(stringDataTestsData.getJsonArray(i));
			ListesParseJSON.asStringDataArrayList(stringDataTestsData.asJSONArrayList(i));
			ListesParseJSON.asStringDataArrayMap(stringDataTestsData.asJSONArrayMap(i));
			ListesParseJSON.asStringDataListMap(stringDataTestsData.asJSONListMap(i));
		}

}
