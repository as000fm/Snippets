package json.types;

import java.math.BigDecimal;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;

import outils.base.OutilsBase;
import outils.reflexions.data.TypeInfoData;

/**
 * Énumération des types json
 */
public enum JSONTypes {
	// Primitives
	BOOLEAN(0, Boolean.class, "boolean", "false", "false"), //
	BYTE(2, Byte.class, "byte", "0", "((byte) 0)"), //
	CHAR(1, "Char", Character.class, "char", "\\\"A\\\"", "((char) 0)"), //
	DOUBLE(7, Double.class, "double", "0", "0"), //
	FLOAT(6, Float.class, "float", "0", "0"), //
	INT(4, "Int", Integer.class, "int", "0", "0"), //
	LONG(5, Long.class, "long", "0", "0"), //
	SHORT(3, Short.class, "short", "0", "((short) 0)"), //
	// Commun
	BIG_DECIMAL(8, BigDecimal.class, "asStringToBigDecimal(value)"), //
	DATE(10, Date.class, "asStringToDate(value)"), //
	INSTANT(14, Instant.class, "Instant.ofEpochSecond(asStringToLong(value))"), //
	LIST(16, List.class), //
	MAP(17, Map.class), //
	OBJECT(9, Object.class), //
	SQL_DATE(11, "SqlDate", java.sql.Date.class, null, null, "null", "new java.sql.Date(asStringToDate(value).getTime())"), //
	STRING(14, String.class), //
	TIME(13, Time.class, "new Time(asStringToDate(value).getTime())"), //
	TIMESTAMP(13, Timestamp.class, "new Timestamp(asStringToDate(value).getTime())"), //
	;

	/** Rang pour la promotion du type json **/
	final private int rank;

	/** Nom du type json **/
	final private String jsonTypeName;

	/** Données du type de classe **/
	final private TypeInfoData jsonType;

	/** Primitive java du type json **/
	final private String primitive;

	/** Valeur pour les tests automatisés **/
	final private String value;

	/** Valeur par défaut **/
	final private String defaultValue;

	/** Convertisseur **/
	final private String convertor;

	/**
	 * Constructeur de base
	 * @param rank Rang pour la promotion du type json
	 * @param classe Classe java du type json
	 */
	private JSONTypes(int rank, Class<?> classe) {
		this(rank, classe.getSimpleName(), classe, null, null, "null", null);
	}

	/**
	 * Constructeur de base
	 * @param rank Rang pour la promotion du type json
	 * @param classe Classe java du type json
	 * @param convertor Convertisseur
	 */
	private JSONTypes(int rank, Class<?> classe, String convertor) {
		this(rank, classe.getSimpleName(), classe, null, null, "null", convertor);
	}

	/**
	 * Constructeur de base
	 * @param rank Rang pour la promotion du type json
	 * @param jsonTypeName Nom du type json
	 * @param classe Classe java du type json
	 */
	private JSONTypes(int rank, String jsonTypeName, Class<?> classe) {
		this(rank, jsonTypeName, classe, null, null, "null", null);
	}

	/**
	 * Constructeur de base
	 * @param rank Rang pour la promotion du type json
	 * @param jsonTypeName Nom du type json
	 * @param classe Classe java du type json
	 * @param value Valeur pour les tests automatisés
	 * @param defaultValue Valeur par défaut
	 */
	private JSONTypes(int rank, String jsonTypeName, Class<?> classe, String value, String defaultValue) {
		this(rank, jsonTypeName, classe, null, value, defaultValue, null);
	}

	/**
	 * Constructeur de base
	 * @param rank Rang pour la promotion du type json
	 * @param classe Classe java du type json
	 * @param primitive Primitive java du type json
	 * @param value Valeur pour les tests automatisés
	 * @param defaultValue Valeur par défaut
	 */
	private JSONTypes(int rank, Class<?> classe, String primitive, String value, String defaultValue) {
		this(rank, classe.getSimpleName(), classe, primitive, value, defaultValue, null);
	}

	/**
	 * Constructeur de base
	 * @param classe Classe java du type json
	 * @param primitive Primitive java du type json
	 * @param value Valeur pour les tests automatisés
	 * @param defaultValue Valeur par défaut
	 * @param convertor Convertisseur
	 */
	private JSONTypes(int rank, Class<?> classe, String primitive, String value, String defaultValue, String convertor) {
		this(rank, classe.getSimpleName(), classe, primitive, value, defaultValue, convertor);
	}

	/**
	 * Constructeur de base
	 * @param rank Rang pour la promotion du type json
	 * @param jsonTypeName Nom du type json
	 * @param classe Classe java du type json
	 * @param primitive Primitive java du type json
	 * @param value Valeur pour les tests automatisés
	 * @param defaultValue Valeur par défaut
	 * @param convertor Convertisseur
	 */
	private JSONTypes(int rank, String jsonTypeName, Class<?> classe, String primitive, String value, String defaultValue) {
		this(rank, jsonTypeName, classe, primitive, value, defaultValue, null);
	}

	/**
	 * Constructeur de base
	 * @param rank Rang pour la promotion du type json
	 * @param jsonTypeName Nom du type json
	 * @param classe Classe java du type json
	 * @param primitive Primitive java du type json
	 * @param value Valeur pour les tests automatisés
	 * @param defaultValue Valeur par défaut
	 * @param convertor Convertisseur
	 */
	private JSONTypes(int rank, String jsonTypeName, Class<?> classe, String primitive, String value, String defaultValue, String convertor) {
		this.rank = rank;
		this.jsonTypeName = jsonTypeName;
		this.jsonType = new TypeInfoData(classe);
		this.primitive = primitive;
		this.value = value;
		this.defaultValue = defaultValue;
		this.convertor = convertor;
	}

	/**
	 * Extrait le type json pour une valeur donnée
	 * @param value La valeur à extraire
	 * @return le type (null si pas trouvé)
	 */
	final public static JSONTypes getJSONType(String value) {
		if (!OutilsBase.isEmpty(value)) {
			for (JSONTypes type : JSONTypes.values()) {
				if (type.name().equalsIgnoreCase(value)) {
					return type;
				}

				if (OutilsBase.areEqualsIgnoreCase(type.getJsonTypeName(), value)) {
					return type;
				}

				if (OutilsBase.areEqualsIgnoreCase(type.getJsonType().getTypeName(), value)) {
					return type;
				}

				if (OutilsBase.areEqualsIgnoreCase(type.getJsonType().getTypeName(true), value)) {
					return type;
				}
			}
		}

		return null;
	}

	/**
	 * Extrait le type json pour une classe donnée
	 * @param classname La classe à extraire
	 * @return le type (null si pas trouvé)
	 */
	final public static JSONTypes getJSONType(Class<?> classe) {
		if (classe != null) {
			return getJSONType(classe.getName());
		}

		return null;
	}

	/**
	 * Extrait le type d'un élément json
	 * @param jsonElement L'élément json à extraire le type
	 * @return le type d'un élément json (OBJECT par défaut)
	 */
	final public static JSONTypes getElementType(JsonElement jsonElement) {
		if (jsonElement != null) {
			if (jsonElement.isJsonPrimitive()) {
				return getPrimitiveType(jsonElement.getAsJsonPrimitive());
			} else if (jsonElement.isJsonArray()) {
				return LIST;
			}
		}

		return OBJECT;
	}

	/**
	 * Extrait le type d'une primitive json
	 * @param jsonPrimitive La primitive json à extraire le type
	 * @return le type d'une primitive json (null si pas trouvé)
	 */
	final public static JSONTypes getPrimitiveType(JsonPrimitive jsonPrimitive) {
		if (jsonPrimitive != null) {
			if (jsonPrimitive.isBoolean()) {
				return BOOLEAN;
			} else if (jsonPrimitive.isNumber()) {
				return getPrimitiveTypeNumber(jsonPrimitive.getAsString());
			} else if (jsonPrimitive.isString()) {
				switch (jsonPrimitive.getAsString()) {
					case "#BigDecimal":
						return BIG_DECIMAL;
					case "#Boolean":
						return BOOLEAN;
					case "#Byte":
						return BYTE;
					case "#Char":
					case "#Character":
						return CHAR;
					case "#Date":
						return DATE;
					case "#Double":
						return DOUBLE;
					case "#Float":
						return FLOAT;
					case "#Int":
					case "#Integer":
						return INT;
					case "#List":
						return LIST;
					case "#Long":
						return LONG;
					case "#Map":
						return MAP;
					case "#Object":
						return OBJECT;
					case "#SqlDate":
						return SQL_DATE;
					case "#Timestamp":
						return TIMESTAMP;
					default:
						return STRING;
				}
			} else {
				throw new RuntimeException("Pas de traitement pour " + jsonPrimitive);
			}
		}

		return null;
	}

	/**
	 * Extrait la classe d'une primitive de type décimale
	 * @param value La valeur à extraire
	 * @return la classe d'une primitive de type décimale
	 */
	final public static JSONTypes getPrimitiveTypeNumber(String value) {
		try {
			Integer.parseInt(value);
			return INT;
		} catch (NumberFormatException nfe1) {
			try {
				Long.parseLong(value);
				return LONG;
			} catch (NumberFormatException nfe2) {
				try {
					Double.parseDouble(value);
					return DOUBLE;
				} catch (NumberFormatException nfe3) {
					return BIG_DECIMAL;
				}
			}
		}
	}

	/**
	 * Effectue la promotion de 2 primitives json selon leur rang respectifs
	 * @param jsonPrimitive1 La primitive json 1 à promouvoir
	 * @param jsonPrimitive2 La primitive json 2 à promouvoir
	 * @return la primitive promue (i.e. jsonPrimitive1 ou jsonPrimitive2)
	 */
	final public static JsonPrimitive getPromotedPrimitive(JsonPrimitive jsonPrimitive1, JsonPrimitive jsonPrimitive2) {
		if (OutilsBase.areNulls(jsonPrimitive1, jsonPrimitive2)) {
			return null;
		} else if (jsonPrimitive1 == null) {
			return jsonPrimitive2;
		} else if (jsonPrimitive2 == null) {
			return jsonPrimitive1;
		}

		return (getPrimitiveType(jsonPrimitive1).getRank() >= getPrimitiveType(jsonPrimitive2).getRank()) ? jsonPrimitive1 : jsonPrimitive2;
	}

	/**
	 * Détermine si c'est un tableau de valeurs primitives (JsonNull inclus)
	 * @param array Le tableau à déterminer
	 * @return vrai si c'est un tableau de valeurs primitives (JsonNull inclus)
	 */
	final public static boolean isJsonPrimitiveArray(JsonArray array) {
		if (array == null) {
			return false;
		} else if (array.size() == 0) {
			return false;
		}

		Iterator<JsonElement> iterator = array.iterator();

		while (iterator.hasNext()) {
			JsonElement element = iterator.next();

			if (!element.isJsonNull() && !element.isJsonPrimitive()) {
				return false;
			}
		}

		return true;
	}

	/**
	 * Détermine si c'est un tableau d'objets json
	 * @param array Le tableau à déterminer
	 * @return vrai si c'est un tableau d'objets json
	 */
	final public static boolean isJsonObjectArray(JsonArray array) {
		if (array == null) {
			return false;
		} else if (array.size() == 0) {
			return false;
		}

		Iterator<JsonElement> iterator = array.iterator();

		while (iterator.hasNext()) {
			JsonElement element = iterator.next();

			if (!element.isJsonObject()) {
				return false;
			}
		}

		return true;
	}

	/**
	 * Détermine si c'est un tableau de tableaux json
	 * @param array Le tableau à déterminer
	 * @return vrai si c'est un tableau de tableaux json
	 */
	final public static boolean isJsonArrayArray(JsonArray array) {
		if (array == null) {
			return false;
		} else if (array.size() == 0) {
			return false;
		}

		Iterator<JsonElement> iterator = array.iterator();

		while (iterator.hasNext()) {
			JsonElement element = iterator.next();

			if (!element.isJsonArray()) {
				return false;
			}
		}

		return true;
	}

	/**
	 * Extrait le type d'un tableau json
	 * @param array Le tableau json à extraire le type
	 * @return le type de tableau json (null si pas trouvé)
	 */
	final public static JSONTypes getArrayPrimitiveType(JsonArray array) {
		if (array != null) {
			if (array.size() == 0) {
				return null;
			}

			return getPrimitiveType(array.get(0).getAsJsonPrimitive());
		}

		return null;
	}

	/**
	 * Indique si l'énumération a une primitive ou non
	 * @return vrai si l'énumération a une primitive
	 */
	public boolean hasPrimitive() {
		return !OutilsBase.isEmpty(primitive);
	}

	/**
	 * Extrait le code java spécifique de retour du type json
	 * @param primitiveReturnCode Indicateur de code de retour pour la primitive
	 * @return le code java spécifique de retour du type json (null si code java non spécifique)
	 */
	public String getReturnCode(boolean primitiveReturnCode) {
		if (this.equals(OBJECT)) {
			return "element.toString()";
		} else if (this.equals(CHAR)) {
			return primitiveReturnCode ? "(char) element.getAsCharacter()" : "new Character(element.getAsCharacter())";
		}

		return null;
	}
	
	/**
	 * Extrait le test automatisé
	 * @return le test automatisé
	 */
	public String getAutomatedTest() {
		return (value != null) ? ", \"(JsonElement) new JsonPrimitive(" + value + ")\"" : "";
	}

	/**
	 * Extrait le champ rank
	 * @return un int
	 */
	public int getRank() {
		return rank;
	}

	/**
	 * Extrait le champ jsonTypeName
	 * @return un String
	 */
	public String getJsonTypeName() {
		return jsonTypeName;
	}

	/**
	 * Extrait le champ jsonType
	 * @return un TypeInfoData
	 */
	public TypeInfoData getJsonType() {
		return jsonType;
	}

	/**
	 * Extrait le champ primitive
	 * @return un String
	 */
	public String getPrimitive() {
		return primitive;
	}

	/**
	 * Extrait le champ value
	 * @return un String
	 */
	public String getValue() {
		return value;
	}

	/**
	 * Extrait le champ defaultValue
	 * @return un String
	 */
	public String getDefaultValue() {
		return defaultValue;
	}

	/**
	 * Extrait le champ convertor
	 * @return un String
	 */
	public String getConvertor() {
		return convertor;
	}

}
